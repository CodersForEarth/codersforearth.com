# ----------------------------------------------------------------
# WHAT IS THIS FILE FOR?
# Using docker compose is one of two ways we deploy Nsustain.com
# If you're running it on one host, use docker compose.
# If you're running it on two or more hosts for high availability,
# use kubernetes.
# ----------------------------------------------------------------

# We use Compose Version 3.3 because it's the recommended version
# by Kompose, which automatically converts Compose files into
# Kubernetes objects.
# Source:
#   https://kompose.io/conversion/#version-table
version: "3.3"
services:
  flarum:
    image: nsustain/flarum:latest
    container_name: flarum
    # Always restart the container, even after reboot
    restart: unless-stopped
    pull_policy: never
    build:
      dockerfile: ./flarum.Dockerfile
    # Since this container doesn't accept SIGTERM, we use
    # stop_grace_period: 0.5s to send SIGKILL after 0.5s
    stop_grace_period: 0.5s
    depends_on:
      - mariadb
    ports:
      - 80:80
      - 443:443
    expose:
      - 9000  # used by PHP-FPM
    networks:
      - back-end
    volumes:
      # These are the data files for the container.
      # Location of these files:
      #   /var/lib/docker/volumes/...
      - flarum-data:/var/www/html/flarum
      - nginx-conf:/etc/nginx

      # When you first run our image, these volumes will
      # be empty. Howver, if you'd like to set up https / SSL,
      # these volumes will be used for storing the certificates.
      - letsencrypt-data:/etc/letsencrypt

      # certbot uses lock-files system for its internal functions.
      # Source:
      #   https://eff-certbot.readthedocs.io/en/stable/using.html#where-certs
      - letsencrypt-lockfiles:/var/lib/letsencrypt

    env_file:
     - exampleenvflarum

  mariadb:
    image: nsustain/mariadb:latest
    container_name: mariadb
    restart: unless-stopped
    pull_policy: never
    build:
      dockerfile: ./mariadb.Dockerfile
    expose:
      - 3306  # used by MariaDB
    networks:
      - back-end
    volumes:
      - mariadb-data:/var/lib/mysql
    env_file:
     - exampleenvmariadb

volumes:
  flarum-data:
    name: flarum-data
  nginx-conf:
    name: nginx-conf
  letsencrypt-data:
    name: letsencrypt-data
  letsencrypt-lockfiles:
    name: letsencrypt-lockfiles
  mariadb-data:
    name: mariadb-data

# "The presence of these objects is sufficient to define them"
# Source:
#   https://docs.docker.com/compose/compose-file/
networks:
  back-end: {}

# TODO:
# Use --init.
# Source:
#   https://docs.docker.com/config/containers/multi-service_container/
# "The container’s main process is responsible for managing all processes that it starts. In some cases, the main process isn’t well-designed, and doesn’t handle “reaping” (stopping) child processes gracefully when the container exits. If your process falls into this category, you can use the --init option when you run the container. The --init flag inserts a tiny init-process into the container as the main process, and handles reaping of all processes when the container exits. Handling such processes this way is superior to using a full-fledged init process such as sysvinit, upstart, or systemd to handle process lifecycle within your container."
