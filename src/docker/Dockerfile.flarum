# -------------------------------------------------------------------
# Most of the times, we build this image with:
# Example:
#   docker build --no-cache -t nsustain/flarum:1.8.0 -t nsustain/flarum:latest -f Dockerfile.flarum .
# -------------------------------------------------------------------
FROM alpine:latest

# "Users SHOULD use reverse-DNS notation to prevent labels from
# conflicting with those used by other software."
# Source:
#   https://docs.docker.com/compose/compose-file/#labels-1
LABEL com.nsustain.version="1.8.0"
LABEL com.nsustain.description="Nsustain.com"
LABEL com.nsustain.maintainer="Soobin Rho <soobinrho@nsustain.com>"

ENV FLARUM_VERSION="v1.8.0"

# Fixes php-fpm uid not found error.
# Source:
#   https://stackoverflow.com/a/70022208
RUN adduser -S www-data -u 1000

# Flarum installation.
# Source:
#   https://github.com/mondediefr/docker-flarum/blob/master/Dockerfile
RUN apk update \
 && apk upgrade --no-cache \
 && apk add --no-cache \
    bash \
    curl \
    git \
    icu-data-full \
    libcap \
    vim \
    php82 \
    php82-ctype \
    php82-curl \
    php82-dom \
    php82-exif \
    php82-fileinfo \
    php82-fpm \
    php82-gd \
    php82-gmp \
    php82-iconv \
    php82-intl \
    php82-mbstring \
    php82-mysqlnd \
    php82-opcache \
    php82-pecl-apcu \
    php82-openssl \
    php82-pdo \
    php82-pdo_mysql \
    php82-phar \
    php82-session \
    php82-tokenizer \
    php82-xmlwriter \
    php82-zip \
    php82-zlib \
    mysql-client \
    mariadb-client \
 && ln -s /usr/bin/php82 /usr/bin/php \
 && cd /tmp \
 && curl --progress-bar http://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \
 && chmod +x /usr/local/bin/composer \
 && mkdir -p /var/www/html/flarum \
 && COMPOSER_CACHE_DIR="/tmp" composer create-project flarum/flarum:$VERSION /var/www/html/flarum

COPY ./configs_flarum/flarumInstall.yaml /home/www-data/flarumInstall.yaml
COPY ./configs_flarum/flarumEntryPoint /home/www-data/flarumEntryPoint
COPY ./configs_flarum/config.php /home/www-data/config.php
COPY ./configs_flarum/www.conf /etc/php82/php-fpm.d/www.conf

RUN composer clear-cache \
 && rm -rf /tmp/* \
 && mkdir -p /usr/log/php82 \
 && chown -R www-data:www-data /usr/log/php82 \
 && chown -R www-data:www-data /etc/php82 \
 && chown -R www-data:www-data /var/www/html/flarum \
 && chown -R www-data:www-data /usr/lib/php82 \
 && chown -R www-data:www-data /home/www-data/flarumInstall.yaml \
 && chown -R www-data:www-data /home/www-data/flarumEntryPoint \
 && chown -R www-data:www-data /home/www-data/config.php \
 && chmod -R 775 /var/www/html/flarum \
 && chmod -R 775 /usr/lib/php82 \
 && apk add --update libintl \
 && apk add --virtual build_deps gettext \
 && apk del build_deps

# WORKDIR actually may change depending on the base image we use.
# Therefore, it's a good practice to always set WORKDIR explicitly.
WORKDIR /var/www/html/flarum

HEALTHCHECK --interval=2m --timeout=2m CMD curl -f http://127.0.0.1/php-fpm-ping || exit 1

# Proper way of executing php-fpm82.
# Source:
#   https://stackoverflow.com/a/57704441
ENTRYPOINT ["/home/www-data/flarumEntryPoint"]
CMD ["/home/www-data/flarumEntryPoint","php-fpm82","--nodaemonize","--allow-to-run-as-root"]

# -------------------------------------------------------------------
# Useful Dockerfile syntax
# -------------------------------------------------------------------

# Why do we use volumes instead of bind mounts?
# "While bind mounts are dependent on the directory structure and OS of
# the host machine, volumes are completely managed by Docker ...
# Volumes are easier to back up or migrate than bind mounts."
# By the way, you don't have to create a volume yourself.
# Docker creates a volume itself if the volume doesn't exist.
# Source:
#   https://docs.docker.com/storage/volumes/
#
# VOLUME ["/flarum/"]

# ADD [--chown=<user>:<group>] [--checksum=<checksum>] <src>... <dest>

# Unlike RUN, which runs commands at the build time,
# CMD is what the image runs when we use "docker run ..."
# The difference between CMD and ENTRYPOINT is that
# extra arguments at "docker run <HERE>" override CMD,
# while ENTRYPOINT is still preserved.
#
# CMD [ "sh", "-c", "echo Hello World" ]


# "The best use for ENTRYPOINT is to set the imageâ€™s main command,
# allowing that image to be run as though it was that command
# (and then use CMD as the default flags)."
# Example:
#   ENTRYPOINT ["s3cmd"]
#   CMD ["--help"]
# Source:
#   https://docs.docker.com/develop/develop-images/dockerfile_best-practices/
#
# Difference between exec form and shell form:
# Exec form: ENTRYPOINT ["executable", "param1", "param2"]
# Shell form: ENTRYPOINT command param1 param2
# Exec form is preferred because shell form "will not receive Unix signals -
# so your executable will not receive a SIGTERM from docker stop <container>."
# Source:
#   https://docs.docker.com/engine/reference/builder
#
# ENTRYPOINT ["sh", "-c", "echo Hello World"]
