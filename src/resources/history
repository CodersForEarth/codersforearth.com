#!/bin/bash

# -----------------------------------------
# K8s
# -----------------------------------------
ibmcloud login

# Get ibmcloud Kubernetes configs so that we can run
# kubectl from our own computer.
ibmcloud ks cluster ls  # Suppose your cluster name is nsustain
ibmcloud ks cluster config --cluster nsustain --admin

# Get all available K8s resources with their aliases
kubectl api-resources
kubectl get nodes -o wide

# Run bash inside the pod
kubectl exec -it [podName] /bin/bash

kubectl run test --image=soobinrho/test:0.1 --port=30870 --env="NGINX_PORT=30870"

# Copy files
kubectl cp <namespace>/<pod>:<pod_filepath>/<filename> <local_filepath>/<filename>

# Run k9s to monitor k8s
docker run --rm -it -v ~/.kube/config:/root/.kube/config quay.io/derailed/k9s

kubectl apply -f cloudflared.yaml
kubectl delete -f cloudflared.yaml

# deployment in short = deploy
kubectl delete --all deploy

# services in short = svc
kubectl delete --all svc


# "To decide how to handle updates, StatefulSets use an update
# strategy defined in spec: updateStrategy. There are two
# strategies, OnDelete and RollingUpdate"
# Source:
#   https://cloud.google.com/kubernetes-engine/docs/concepts/statefulset#updating_statefulsets

# Rollback to the previous deployment
kubectl rollout undo deployment/abc

# Check the rollout status of a daemonset
kubectl rollout status daemonset/foo

# Restart a deployment
kubectl rollout restart deployment/abc

# "Create a Service before its corresponding backend workloads (Deployments or ReplicaSets), and before any workloads that need to access it."
# Source:
#   https://kubernetes.io/docs/concepts/configuration/overview/

# How to use hostPort
# Source:
#   https://alesnosek.com/blog/2017/02/14/accessing-kubernetes-pods-from-outside-of-the-cluster/
apiVersion: v1
kind: Pod
metadata:
  name: influxdb
spec:
  containers:
    - name: influxdb
      image: influxdb
      ports:
        - containerPort: 8086
          hostPort: 8086

# How to add Redis on K8s
# Source:
#   https://cloud.google.com/kubernetes-engine/docs/tutorials/guestbook

# How to encode / decode base64 for K8s secrets
# Source:
#   https://www.cloudytuts.com/tutorials/kubernetes/how-to-base64-encode-kubernetes-secrets/
echo -n 'super-secret-password' | base64
echo -n 'c3VwZXItc2VjcmV0LXBhc3N3b3Jk' | base64 --decode

# Journey for persistent volume
# - WHAT IS OBJECT STORAGE?
# Source:
#   https://www.ibm.com/cloud/learn/object-storage?utm_medium=OSocial&utm_source=Youtube&utm_content=000016GC&utm_term=10007090&utm_id=YTDescription-101-What-is-Object-Storage-LH-Object-Storage-Complete-Guide
# 0. OVERALL PICTURE: https://cloud.ibm.com/docs/containers?topic=containers-storage_cos_apps
# 1. Get IBM Cloud Object Storage (COS)
#    Create COS API key and make a K8s secret
#    https://cloud.ibm.com/docs/containers?topic=containers-storage-cos-understand#create_cos_secret

# 2. Install COS plugin
# Source:
#   https://cloud.ibm.com/docs/containers?topic=containers-storage_cos_install&mhsrc=ibmsearch_a&mhq=installing+cos

# Create API key from https://cloud.ibm.com/objectstorage
# and then copy "apikey"

ibmcloud resource service-instances  # Suppose <Name> is COS-nsustain
ibmcloud resource service-instance COS-nsustain  # Copy <GUID>
kubectl create secret generic cos-write-access --type=ibm/ibmc-s3fs --from-literal=api-key=<api_key> --from-literal=service-instance-id=<service_instance_guid>
helm ibmc install ibm-object-storage-plugin ibm-helm/ibm-object-storage-plugin --set license=true --set quotaLimit=true

ibmc-s3fs-standard-regional
